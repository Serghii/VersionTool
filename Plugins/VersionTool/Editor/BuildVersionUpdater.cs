using System.IO;
using Plugins.VersionTool.Tools;
using UnityEditor;
using UnityEngine;

namespace Plugins.VersionTool
{
    public class BuildVersionUpdater
    {
        public const string FileName = "BuildVersion";
        public const string Extension = ".asset";
        public const string DefaultFullPath = "Assets/_Autogenerated/" + FileName + Extension;

        private const string STRING_ZERO = "0";

        public BuildVersion Version { get; }

        public BuildVersionUpdater(BuildVersion buildVersion)
        {
            Version = buildVersion;
        }

        public static BuildVersionUpdater CreateOrFindInProject()
        {
            string[] versionAssets = AssetDatabase.FindAssets("t:BuildVersion");
            bool versionExists = versionAssets.Length == 1;

            BuildVersionUpdater updater = versionExists
                ? new BuildVersionUpdater(AssetDatabase.LoadAssetAtPath<BuildVersion>(AssetDatabase.GUIDToAssetPath(versionAssets[0])))
                : new BuildVersionUpdater(ScriptableObject.CreateInstance<BuildVersion>());

            if (!versionExists)
                updater.SaveAsAsset();

            //updater.RefreshAndSave();

            return updater;
        }

        public void SaveAsAsset()
        {
            Directory.CreateDirectory(Path.GetDirectoryName(DefaultFullPath) ?? "");
            AssetDatabase.CreateAsset(Version, DefaultFullPath);
            AssetDatabase.Refresh();
        }

        public BuildVersionUpdater RefreshAndSave(bool autoSave = true)
        {
            string[] versionParts = Application.version.Split('.');

            Version.Major = versionParts.Length > 0 ? versionParts[0] : STRING_ZERO;
            Version.Minor = versionParts.Length > 1 ? versionParts[1] : STRING_ZERO;
            Version.Build = versionParts.Length > 2 ? versionParts[2] : STRING_ZERO;
            Version.Git = VersionControlTools.IsGitRepository() ? VersionControlTools.GetGitVersion() : string.Empty;
            Version.Callsign = CallsignGenerator.GenerateStupidCallsign(Version.Git);
            EditorUtility.SetDirty(Version);

            if (autoSave)
                AssetDatabase.SaveAssets();

            return this;
        }
    }
}